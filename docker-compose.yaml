services:
  concert:
    build:
      context: .
      dockerfile: ./apps/concert/Dockerfile
    ports:
      - '3000:3000'
    command: npm run start:dev concert
    environment:
      - PORT=3000
      - MONGODB_CONCERT_URI=mongodb://root:root@concert_mongodb:27017
      - RABBIT_MQ_URI=amqp://rabbitmq:5672
      - RABBIT_MQ_CONCERT_QUEUE=CONCERT
      - RABBIT_MQ_AUTH_QUEUE=AUTH
    depends_on:
      - auth
      - concert_mongodb
      - rabbitmq
    volumes:
      - .:/usr/src/app
    networks:
      - concert_network

  auth:
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
    ports:
      - '3001:3001'
    command: npm run start:dev auth
    environment:
      - PORT=3001
      - MONGODB_URI=mongodb://root:root@auth_mongodb:27017
      - JWT_SECRET=n1H/yqiB4r3mj83Vy3usBUuTUggbLyldfPIXxE3NneRem32Z5JuDQoUxFfcgNoLv8KPwLVDrEOrCCEeiwZdjpw==
      - JWT_EXPIRES_IN=3600
      - RABBIT_MQ_URI=amqp://rabbitmq:5672
      - RABBIT_MQ_AUTH_QUEUE=AUTH
    depends_on:
      - auth_mongodb
      - rabbitmq
    volumes:
      - .:/usr/src/app
    networks:
      - concert_network

  booking:
    build:
      context: .
      dockerfile: ./apps/booking/Dockerfile
    ports:
      - '3002:3002'
    command: npm run start:dev booking
    environment:
      - PORT=3002
      - MONGODB_BOOKING_URI=mongodb://root:root@booking_mongodb:27017
      - RABBIT_MQ_URI=amqp://rabbitmq:5672
      - RABBIT_MQ_CONCERT_QUEUE=CONCERT
      - RABBIT_MQ_AUTH_QUEUE=AUTH
      - REDIS_HOST_1=redis_1
      - REDIS_PORT_1=6379
      - REDIS_HOST_2=redis_2
      - REDIS_PORT_2=6379
      - REDIS_HOST_3=redis_3
      - REDIS_PORT_3=6379
    depends_on:
      - auth
      - booking_mongodb
      - rabbitmq
      - redis_1
      - redis_2
      - redis_3
    volumes:
      - .:/usr/src/app
    networks:
      - concert_network

  rabbitmq:
    image: rabbitmq
    ports:
      - 5672:5672
    networks:
      - concert_network

  auth_mongodb:
    image: mongo:latest
    container_name: auth_mongodb
    ports:
      - 27017:27017
    volumes:
      - auth_mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    restart: always
    networks:
      - concert_network

  booking_mongodb:
    image: mongo:latest
    container_name: booking_mongodb
    ports:
      - 27018:27017
    volumes:
      - booking_mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    # command: ['mongod', '--replSet', 'rs0', '--bind_ip_all']
    restart: always
    networks:
      - concert_network

  concert_mongodb:
    image: mongo:latest
    container_name: concert_mongodb
    ports:
      - 27019:27017
    volumes:
      - concert_mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    restart: always
    networks:
      - concert_network

  # Redis Service for Booking Service
  redis_1:
    image: redis:latest
    container_name: redis_1
    ports:
      - '6379:6379'
    restart: always # Add restart policy
    networks:
      - concert_network

  redis_2:
    image: redis:latest
    container_name: redis_2
    ports:
      - '6380:6379'
    restart: always # Add restart policy
    networks:
      - concert_network
  redis_3:
    image: redis:latest
    container_name: redis_3
    ports:
      - '6381:6379'
    restart: always # Add restart policy
    networks:
      - concert_network

  nginx:
    image: nginx:latest
    container_name: api_gateway
    ports:
      - '8080:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - auth
      - concert
      - booking
    networks:
      - concert_network

volumes:
  auth_mongodb_data:
  booking_mongodb_data:
  concert_mongodb_data:

networks:
  concert_network:
    driver: bridge
